#+title:     Dungeons & Dragons
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2019-09-15 Sun>
#+language:  en
#+file_tags:
#+tags:

* wish list
** TODO use names for columns
   Right now columns are indicated by the number of their appearance. We really
   shouldn't care about such things, and should use names which can be
   configurable.

** TODO specify a column list instead of a table template string
   Normally giving maximum control to the consumer should be a preferred means
   of building any kind of API, but I think there's value in saying we have
   certain expectations for the table. It must be an =org-table= compatible
   table, for example. I'm also not too sure how many of these things are going
   to work if we start using more sophisticated table layouts as seen in
   =table.el=, which =org-table= is technically compatible with.

** TODO add a start-combat function
   This would be handy instead of manually moving the cursor.

** TODO add player character list to automatically insert
   Somehow it would be nice to specify that player characters should always show
   up in the combat table. In D&D it's very rare and typically not preferred to
   split the party. Even if you do, or you have a player short, you could just
   remove the character(s) manually.

** TODO interactive combat building
   Being able to express "I need 4 gnolls and 1 maralith" would be amazing.

** TODO insert monster
   Insert a monster by type. Give it a name. Based on preferences maybe we roll
   initiative for you, or you give us the initiative. It can also roll hit
   points, assume standard hit points, use max or min hit points, or allow
   manual hit points.

** TODO roll dice from expression
   Having a cursor upon some expression such as =3d6 + 12= would be really nice
   to interpret. This could be a big undertaking though and perhaps worthy of
   its own project.

** TODO use keymap
   Right now key bindings are hard coded and assume Spacemacs. Having Spacemacs
   specific helpers isn't bad, but we should detect if Spacemacs is even present
   first.

   And even then, we should provide a configurable keymap.

** TODO literate tests
   Wouldn't it be great to have something akin to:

   #+begin_example emacs-lisp :results none :export none
     (dnd/create-combat-table)
   #+end_example

   #+begin_example org
   , | turn | name | ac |...
   , |------+------+----+...
   #+end_example

   And it just asserted the first block's output matched the next block's?

   Thus far I have not found any pre-written software to explicitly assist with
   this.

* combat table
** template
   #+begin_src emacs-lisp :results none :tangle yes
     (defvar dnd/combat-table-template
       "| turn | name | kind | ord | ac | chp | thp | spec | dist |
     |------+------+------+-----+----+-----+-----+------+------|"
       "Template to use when creating combat table."
       )
   #+end_src

** inserting
   Insert a combat table.
   #+begin_src emacs-lisp :results none :tangle yes
     (defun dnd/create-combat-table ()
       "Inserts a combat table into the document."
       (interactive)
       (let ((start (point)))
         (insert dnd/combat-table-template)
         (indent-region start (point))
         )
       )
   #+end_src

** pre-populate table

There's a lot of things we can pre-populate in the table.  This includes
initiative rolls, current and maximum hit points, and armor class.  The
"special" section could possibly be populated too, but for now I want to leave
that empty because it'll take some smarts to figure out what to put in there.

All we ask from the user is that the ~kind~ field is populated for everything
that's going into the combat.  We can run ~dnd-table-populate~ after that, and
we'll get everything we want.

This assumes a known format for the stat blocks, which we will attempt to
document here.

#+name: dnd/table-populate
#+begin_src emacs-lisp :results none :exports code :tangle yes
;; Blatant theft from:
;; https://www.reddit.com/r/orgmode/comments/ot8g0j/orgnexttable_and_orgprevioustable_jump_to/
;; We should probably make an extended org-table function module, or add it to
;; an existing one.
(defun org-next-table (&optional arg)
  "Jump to the next table.

With a prefix argument ARG, jump forward ARG many tables."
  (interactive "p")
  (cl-loop
   for n below (abs arg)
   with backward = (< arg 0)
   with search-fn = (if backward #'re-search-backward #'re-search-forward)
   do
   (setq pt (point))
   (when (org-at-table-p)
     (funcall search-fn org-table-border-regexp nil :move))
   if (funcall search-fn org-table-line-regexp nil t) do
   (when (org-invisible-p)
     (org-reveal t)
     (org-show-entry)
     (unless (org-at-table-p)
       (cl-decf n)))
   else return (goto-char pt)
   finally (when backward
             (when (funcall search-fn org-table-border-regexp nil :move)
               (next-line))
             (forward-char))))

(defun org-previous-table (&optional arg)
  "Jump to the previous table.

With a prefix argument ARG, jump backward ARG many tables."
  (interactive "p")
  (org-next-table (- arg)))

;; End blatant theft.

;; More things that we should just have...

(defun org-table-get-column-index (column-name)
  "Get the index of COLUMN-NAME at current table."
  (let (
        (index (-find-index
               (lambda (column) (message "column: %s" column) (string= (string-trim column) column-name))
               (car (org-table-to-lisp))
               ))
        )
    (progn
      ;; (message "Found index for %s: %s" column-name index)
      ;; We aren't actually working with an index but a number.  They start
      ;; at 1.
      (+ 1 index)
      )
    )
  )

(defun dnd-table-populate ()
  (interactive)
  ;; Get the table we're on.  We need to save it so we can modify it later.
  (let ((original-table-location (point)))
    (-map-indexed
     ;; for each row
     (lambda (row-index row)
       ;; if it has a type
       (let ((kind (org-table-get row-index (org-table-get-column-index "kind"))))
         (message "row-index: %s kind: %s" row-index kind)
         (if (or (< row-index 2) (string-empty-p kind) (not kind))
             nil
           (progn
             (let (
                   (vals (save-window-excursion
                           (dnd/seek-profile row-index)
                           ;; (org-narrow-to-subtree)
                           (org-next-table 1)
                           (let (
                                 ;; TODO: Assuming these row and column indexes is
                                 ;; dangerous.  Look these up intelligently.
                                 (ac (org-table-get 2 2))
                                 (hp (org-table-get 3 4))
                                 (init (org-table-get 4 2))
                                 )
                             (message "Found ac: %s hp: %s init: %s" ac hp init)
                             (list ac hp init)
                             )
                           ;; Now that we are in the subtree, we find the first table.

                           ;; Get us an org-link from the type field (we should just
                           ;; have a function for this already).
                           ;; dnd/profile-path
                           ;; "creatures"
                           ;; kind
                           ;; Get information from the stat block:
                           ;; - Get the final iniative modifier.
                           ;; - Get the final armor class.
                           ;; - Get the hit points.
                           )
                         )
                   )
               ;; TODO: Use let binding to assign vars instead of using inline
               ;; indxes.
               (progn
                 (goto-char original-table-location)
                 (org-table-put
                  row-index
                  (org-table-get-column-index "ac")
                  (nth 0 vals)
                  )
                 (org-table-put
                  row-index
                  (org-table-get-column-index "chp")
                  (nth 1 vals)
                  )
                 (org-table-put
                  row-index
                  (org-table-get-column-index "thp")
                  (nth 1 vals)
                  )
                 (org-table-put
                  row-index
                  (org-table-get-column-index "ord")
                  (number-to-string
                   (+ (+ 1 (random 20)) (string-to-number (nth 2 vals)))
                   )
                  )
                 (org-table-align)
                 )
               )
             )
           )
         )
       )
     (org-table-to-lisp)
     )
    )
  )
#+end_src

* tracking the current round
  I frequently lose track of which round it is as I apply effects between
  creatures that exist in the initiative order. Having a stark visual counter
  that I advance with a key binding would be just dandy.

  See [[template]] for the default format of a table.

  The =turn= column should indicate the current turn with a series of glyphs
  such as =>>>>= or similar, and I can at some point make it work with a font
  face.
** turn hook
   We can fire an event when we arrive at a turn, and provide information about
   whose turn it is.

   #+begin_src emacs-lisp :results none :tangle yes
     (defvar dnd/turn-functions '()
       "A hook for arriving upon a turn. Provides a ROW."
       )
   #+end_src

** indicator
*** format
   The indicator will be =>>>>= but I should be able to change it.

   #+begin_src emacs-lisp :results none :tangle yes
     (defcustom dnd/turn-indicator-string ">>>>" "String to use for the current turn.")
   #+end_src

*** setting
    Setting the indicator will populate the cell with
    =dnd/turn-indicator-string=.

    #+begin_src emacs-lisp :results none :tangle yes
      (defun dnd//set-turn (row)
        (org-table-put row 1 dnd/turn-indicator-string t)
        (org-table-goto-line row)
        ;; It would be nice to send the row data, but alas.
        (run-hook-with-args 'dnd/turn-functions row)
        )
    #+end_src

** get table lines

   #+begin_src emacs-lisp :results none :tangle yes

     (defun dnd//get-table-lines ()
       (let* (
              (beg (org-table-begin))
              (end (copy-marker (org-table-end)))
              )
         (- (length (split-string
                     (filter-buffer-substring beg end)
                     "\n"
                     t
                     )
                    )
            3))
       )

   #+end_src

** find turn indicator
   The turn indicator will be =>>>>= on the =turn= column. We should go to the
   column and then walk down it until we find it. If we don't find it, return
   =nil=.

   #+begin_src emacs-lisp :results none :tangle yes
     (defun dnd//walk-column-for-indicator (lines line)
       (message "value %s" (org-table-get (+ 2 line) 1))
       (if (< line (+ 1 lines))
           (if (string-equal (org-table-get (+ 2 line) 1) dnd/turn-indicator-string)
               line
             (dnd//walk-column-for-indicator lines (+ 1 line))
             )
         nil
         )
       )

     (defun dnd//add-indicator (line)
       (org-table-put line 1 dnd/turn-indicator-string)
       2
       )


     (defun dnd/find-turn-indicator ()
       (if (org-at-table-p)
           (let* (
                  (lines (dnd//get-table-lines))
                  (indicator (dnd//walk-column-for-indicator lines 0))
                  )
             (message "indicator? %s" indicator)
             (if indicator (+ 2 indicator) nil)
             )
         nil
         )
       )
   #+end_src

** next round

   #+begin_src emacs-lisp :results none :tangle yes

     (defun dnd/next-round ()
       (interactive)
       (if (org-at-table-p)
           (let* (
                  (indicator (dnd/find-turn-indicator))
                  (next (+ (or indicator 0) 1))
                  (lines (dnd//get-table-lines))
                  )
             (if indicator
                 (progn
                   (org-table-put indicator 1 "" t)

                   (if (< next (+ 3 lines))
                       (progn
                         (dnd//set-turn next)
                         )
                     (progn
                       (dnd//set-turn 2)
                       )
                     )
                   )
               (progn

                 (dnd//set-turn 2)
                 )
               )
             )
         (message "Not on a table!")
         )
       )

   #+end_src


* snap to monster profile
  When a monster takes its turn, I'd love to know what that monster has for
  capabilities, notes I might have on that monster (or its kind), and other
  aspects of it. This is hard to efficiently encode in the combat table. When
  using =dnd-next-round= the profile should pop up in a vertical split window.

** where to look
   I keep all of my files in =dnd5e.org=. Maybe there's a better place for it,
   but for now let's put it there.

   #+begin_src emacs-lisp :results none :tangle yes
     (defvar dnd/profile-path (expand-file-name "~/Dropbox/notes/dnd5e.org"))
   #+end_src

** columns
   There needs to be a =kind= column in the combat table. This is the name we
   will key off of.

   #+begin_src emacs-lisp :results none :tangle yes
    (defvar dnd/name-column 2)
    (defvar dnd/kind-column 3)
   #+end_src

** open profile

Once we land on a monster row and have a kind, we can find its profile.


#+begin_src emacs-lisp :results none :tangle yes
(defun dnd/seek-profile (row)
  "Seek D&D profile at ROW."
  (let ((kind (org-table-get row (org-table-get-column-index "kind"))))
    (if (or (string-empty-p kind) (not kind))
        (progn
          (message "Column \"kind\" could not be found at row %s: %s" row kind)
        )
      (progn
        (org-link-open-from-string
         (format "[[file:%s::*%s][%s]]"
                 dnd/profile-path
                 kind
                 kind
                 ))
        )
      )
    ;; (org-mark-ring-goto)
    )
  )

(defun dnd//open-profile (row)
  "Open D&D profile at ROW for user viewing."
  (if
      (dnd/seek-profile row)
      (progn
        (org-show-entry)
        (select-window (previous-window))
        )
    nil
    )
  )
#+end_src

** listen for turns
   We need to listen for turn changes, and we can do this using
   =dnd/turn-functions= (not =-hook= because it is "abnormal" in that it must
   pass an argument).

   #+begin_src emacs-lisp :results none :tangle yes
     (add-hook 'dnd/turn-functions #'dnd//open-profile)
   #+end_src
* keybinding
  #+begin_src emacs-lisp :results none :tangle yes

    ;; Let's not inflict Spacemacs upon others. But we can be kind to those that have it.
    (defmacro dnd/on-spacemacs (&rest body)
      "Execute BODY if this Emacs is running Spacemacs."
      (if (boundp 'spacemacs-version)
        `(progn ,@body)
        nil
        )
      )
    (dnd/on-spacemacs
      (spacemacs/declare-prefix-for-mode 'org-mode "mD" "dnd" "dnd")
      (spacemacs/set-leader-keys-for-major-mode 'org-mode (kbd "D n") 'dnd/next-round)
      (spacemacs/set-leader-keys-for-major-mode 'org-mode (kbd "D c") 'dnd/create-combat-table)
      )
  #+end_src
